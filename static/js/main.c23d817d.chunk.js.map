{"version":3,"sources":["redux/actions/index.js","redux/reducers/index.js","redux/store/index.js","components/NavigationButtons.js","components/EditCard.js","components/FileUpload.js","components/App.js","serviceWorker.js","index.js"],"names":["RECEIVE_JSON","REQUEST_JSON","INCREMENT_INDEX","DECREMENT_INDEX","UPDATE_FIELD","rootReducer","combineReducers","editJSON","state","isLoading","data","a","b","c","index","action","type","Object","assign","payload","map","item","field","value","loggerMiddleware","createLogger","NavigationButtons","dispatch","useDispatch","dataLength","useSelector","length","dataIndex","ButtonGroup","Button","disabled","onClick","useStyles","makeStyles","theme","card","maxWidth","width","marginLeft","marginRight","marginTop","container","display","flexWrap","textField","margin","spacing","subTextField","EditCard","classes","handleChange","key","updateField","useEffect","console","log","Card","className","CardContent","noValidate","autoComplete","keys","TextField","label","onChange","e","target","variant","match","hidden","FileUpload","reader","FileReader","onReaderLoad","newObj","JSON","parse","result","flatten","onload","readAsText","files","handleFileUpload","id","document","querySelector","click","App","useState","dataItem","setDataItem","Boolean","window","location","hostname","preloadedState","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c23d817d.chunk.js","sourcesContent":["export const RECEIVE_JSON = 'RECEIVE_JSON';\nexport const REQUEST_JSON = 'REQUEST_JSON';\nexport const INCREMENT_INDEX = 'INCREMENT_INDEX';\nexport const DECREMENT_INDEX = 'DECREMENT_INDEX';\nexport const UPDATE_FIELD = 'UPDATE_FIELD';\n\nexport function receiveJSON(json) {\n  return {\n    type: RECEIVE_JSON,\n    payload: json,\n  };\n}\n\nexport function requestJSON(json) {\n  return {\n    type: REQUEST_JSON,\n  };\n}\n\nexport function incrementIndex() {\n  return {\n    type: INCREMENT_INDEX,\n  };\n}\n\nexport function decrementIndex() {\n  return {\n    type: DECREMENT_INDEX,\n  };\n}\n\nexport function updateField(field, value) {\n  return {\n    type: UPDATE_FIELD,\n    field: field,\n    value: value,\n  };\n}\n","import { combineReducers } from 'redux';\n\nimport {\n  RECEIVE_JSON,\n  REQUEST_JSON,\n  INCREMENT_INDEX,\n  DECREMENT_INDEX,\n  UPDATE_FIELD,\n} from '../actions';\n\nconst editJSON = (\n  state={\n    isLoading: false,\n    data: [\n      {\n        a: 'hello',\n        b: 'doinker',\n        c: 'test',\n      },\n      {\n        a: 'bye',\n        b: 'doinker',\n        c: 'test',\n      },\n    ],\n    index: 0,\n  },\n  action\n) => {\n  switch (action.type) {\n    case REQUEST_JSON:\n      return Object.assign({}, state, {\n        isLoading: true,\n      });\n    case RECEIVE_JSON:\n      return Object.assign({}, state, {\n        data: action.payload,\n        isLoading: false,\n        index: 0,\n      });\n    case INCREMENT_INDEX:\n      return Object.assign({}, state, {\n        index: state.index + 1,\n      });\n    case DECREMENT_INDEX:\n      return Object.assign({}, state, {\n        index: state.index - 1,\n      });\n    case UPDATE_FIELD:\n      return Object.assign({}, state, {\n        data: state.data.map((item, index) => {\n          if (index === state.index) {\n            item[action.field] = action.value\n          }\n          return item;\n        })\n      });\n    default:\n      return state;\n  }\n}\n\n\nconst rootReducer = combineReducers({\n  editJSON,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nimport rootReducer from '../reducers';\n\nconst loggerMiddleware = createLogger();\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\n  );\n}\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nimport { incrementIndex, decrementIndex } from '../redux/actions';\n\n\nconst NavigationButtons = () => {\n  const dispatch = useDispatch();\n  const dataLength = useSelector(state => state.editJSON.data.length);\n  const dataIndex = useSelector(state => state.editJSON.index);\n\n  return (\n    <ButtonGroup>\n      <Button \n        disabled={dataIndex <= 0}\n        onClick={() => dispatch(decrementIndex())}\n      >\n        <ArrowBackIcon />\n      </Button>\n      <Button\n        disabled={dataIndex >= dataLength - 1}\n        onClick={() => dispatch(incrementIndex())}\n\n      >\n        <ArrowForwardIcon />\n      </Button>\n    </ButtonGroup>\n  );\n}\n\nexport default NavigationButtons;","import React, { useEffect } from 'react';\n\nimport { useDispatch } from 'react-redux';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\n\nimport { updateField } from '../redux/actions';\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    maxWidth: '100%',\n    width: 600,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    marginTop: 20,\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    margin: theme.spacing(1),\n    width: '100%',\n  },\n  subTextField: {\n    margin: theme.spacing(1),\n    marginLeft: 'auto',\n    width: '90%',\n  },\n}));\n\nconst EditCard = ({ data }) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log(data);\n  }, [data]);\n\n  function handleChange(key, value) {\n    dispatch(updateField(key, value));\n  }\n\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        <form className={classes.container} noValidate autoComplete=\"off\">\n          {\n            Object.keys(data).map((key, index) => (\n              <TextField\n                key={index}\n                label={key}\n                value={data[key]}\n                onChange={(e) => handleChange(key, e.target.value)}\n                variant=\"outlined\"\n                // className={classes.textField}\n                className={\n                  key.match(/\\./)\n                  ? classes.subTextField\n                  : classes.textField\n                }\n              />\n            ))\n          }\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default EditCard;","import React from 'react';\n\nimport { useDispatch } from 'react-redux';\n\nimport Button from '@material-ui/core/Button';\n\nimport { receiveJSON } from '../redux/actions';\n\nimport flatten from 'flat';\nimport { classExpression } from '@babel/types';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles(theme => ({\n  hidden: {\n    display: 'none',\n  },\n}));\n\nconst FileUpload = () => {\n  const reader = new FileReader();\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  function handleFileUpload(e) {\n    reader.onload = onReaderLoad;\n    reader.readAsText(e.target.files[0]);\n  }\n\n  function onReaderLoad(e) {\n    const obj = JSON.parse(e.target.result);\n    const newObj = obj.map(item => {\n      return flatten(item);\n    });\n\n    dispatch(receiveJSON(newObj));\n  }\n\n  function handleClick() {\n    document.querySelector('#input').click();\n  }\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        onChange={(e) => handleFileUpload(e)}\n        id='input'\n        className={classes.hidden}\n      />\n      <Button\n        onClick={() => handleClick()}\n        variant=\"outlined\"\n      >\n        Upload\n      </Button>\n    </div>\n  );\n}\n\nexport default FileUpload;","import React, { useEffect, useState } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport NavigationButtons from './NavigationButtons';\nimport EditCard from './EditCard';\nimport FileUpload from './FileUpload';\n\nimport '../assets/App.css';\n\nfunction App() {\n  const data = useSelector(state => state.editJSON.data);\n  const dataIndex = useSelector(state => state.editJSON.index);\n  const [dataItem, setDataItem] = useState();\n\n  useEffect(() => {\n    setDataItem(data[dataIndex]);\n  }, [dataIndex, data]);\n\n  return (\n    <div className=\"App\">\n      <NavigationButtons />\n      {dataItem && (<EditCard data={dataItem} />)}\n      { data && (\n        <p>Index: {dataIndex}</p>\n      )}\n      <FileUpload />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport configureStore from './redux/store';\n\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}